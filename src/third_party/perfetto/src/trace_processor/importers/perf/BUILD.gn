# Copyright (C) 2023 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("../../../../gn/test.gni")

source_set("record") {
  sources = [
    "perf_counter.cc",
    "perf_counter.h",
    "perf_event.h",
    "perf_event_attr.cc",
    "perf_event_attr.h",
    "perf_session.cc",
    "perf_session.h",
    "reader.h",
    "record.h",
  ]
  deps = [
    "../../../../gn:default_deps",
    "../../../../include/perfetto/ext/base:base",
    "../../../../include/perfetto/trace_processor:trace_processor",
    "../../../../protos/perfetto/common:zero",
    "../../../../protos/perfetto/trace/profiling:zero",
    "../../storage",
    "../../tables:tables_python",
    "../../types",
    "../../util:build_id",
    "../common:common",
    "../common:parser_types",
  ]
}

source_set("perf") {
  sources = [
    "attrs_section_reader.cc",
    "attrs_section_reader.h",
    "aux_data_tokenizer.cc",
    "aux_data_tokenizer.h",
    "aux_record.cc",
    "aux_record.h",
    "aux_stream_manager.cc",
    "aux_stream_manager.h",
    "auxtrace_info_record.cc",
    "auxtrace_info_record.h",
    "auxtrace_record.cc",
    "auxtrace_record.h",
    "features.cc",
    "features.h",
    "itrace_start_record.cc",
    "itrace_start_record.h",
    "mmap_record.cc",
    "mmap_record.h",
    "perf_data_tokenizer.cc",
    "perf_data_tokenizer.h",
    "perf_file.h",
    "perf_tracker.cc",
    "perf_tracker.h",
    "record_parser.cc",
    "record_parser.h",
    "sample.cc",
    "sample.h",
    "sample_id.cc",
    "sample_id.h",
    "spe.h",
    "spe_record_parser.cc",
    "spe_record_parser.h",
    "spe_tokenizer.cc",
    "spe_tokenizer.h",
    "time_conv_record.h",
    "util.h",
  ]
  public_deps = [ ":record" ]
  deps = [
    "../../../../gn:default_deps",
    "../../../../protos/perfetto/common:zero",
    "../../../../protos/perfetto/trace:zero",
    "../../../../protos/perfetto/trace/profiling:zero",
    "../../../../protos/third_party/simpleperf:zero",
    "../../sorter",
    "../../storage",
    "../../tables:tables_python",
    "../../types",
    "../../util:build_id",
    "../../util:trace_blob_view_reader",
    "../common:common",
    "../proto:minimal",
  ]

  if (enable_perfetto_etm_importer) {
    deps += [ "../etm:file_tracker" ]
  }
}

perfetto_unittest_source_set("unittests") {
  testonly = true
  sources = [
    "aux_stream_manager_unittest.cc",
    "perf_session_unittest.cc",
    "reader_unittest.cc",
  ]
  deps = [
    ":perf",
    "../../../../gn:default_deps",
    "../../../../gn:gtest_and_gmock",
    "../../../../protos/perfetto/trace/profiling:zero",
    "../../../base",
    "../../storage",
    "../../types",
    "../common",
  ]
}
